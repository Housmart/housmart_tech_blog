<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Operation on カウル Tech Blog</title>
    <link>http://techblog.housmart.co.jp/tags/operation/</link>
    <description>Recent content in Operation on カウル Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 28 Mar 2016 10:34:34 +0900</lastBuildDate>
    <atom:link href="http://techblog.housmart.co.jp/tags/operation/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>脱・巨大なモノリシックアプリ！DRYなRails分割方法</title>
      <link>http://techblog.housmart.co.jp/2016/03/28/git-submodule-for-dry-rails/</link>
      <pubDate>Mon, 28 Mar 2016 10:34:34 +0900</pubDate>
      
      <guid>http://techblog.housmart.co.jp/2016/03/28/git-submodule-for-dry-rails/</guid>
      <description>

&lt;p&gt;Housmartの松江です。&lt;/p&gt;

&lt;p&gt;Railsでアプリケーションを開発していると、&lt;strong&gt;管理者機能や周辺機能も含んだ巨大なプロジェクトになってしまうこと&lt;/strong&gt; や、
&lt;strong&gt;分割したプロジェクト間の管理・同期が煩雑になってしまうこと&lt;/strong&gt; ありますよね。&lt;/p&gt;

&lt;p&gt;今回は以下の要望に応えるべくカウルの開発現場で実施した、Railsプロジェクトの分割と運用をご紹介します。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;巨大な1つのRailsプロジェクトにせず、管理機能部分を分けたい&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分割後はプロジェクト間で必要なロジックを共有したい&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;複数のrailsプロジェクト間でロジックを共有したい状況:186562e261a7107c8b7de063b569e16d&#34;&gt;複数のRailsプロジェクト間でロジックを共有したい状況&lt;/h2&gt;

&lt;p&gt;不動産を扱うカウルの裏側では以下のような多種多様なデータを扱っています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;詳細情報: 最寄り駅・エレベータの有無・ペット可否など&lt;/li&gt;
&lt;li&gt;部屋情報: 間取り・方角・契約の進行状況など&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記を社員が効率よく管理するため、管理者用のアプリケーションが別途用意されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ユーザ用のRailsプロジェクト&lt;/li&gt;
&lt;li&gt;管理者用のRailsプロジェクト&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記のように2つのプロジェクトに分割しているのは、巨大な1つのRailsプロジェクトになり管理が難しくなることを避けるためです。&lt;/p&gt;

&lt;p&gt;しかし、複数のプロジェクトに分割した後、DBテーブルの追加・変更があった場合等に &lt;strong&gt;&amp;ldquo;2つのプロジェクトそれぞれに同じ変更を行う&amp;rdquo;&lt;/strong&gt; 必要のある状況が発生するようになりました。
これは以下の様な問題を引き起こします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2つのプロジェクトに変更を行うコストがかかる&lt;/li&gt;
&lt;li&gt;プロジェクト間での同期できていなかった場合に予期しないエラーが発生する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;カウルではこの状況を &lt;strong&gt;Gitのsubmodule&lt;/strong&gt; を用いて改善しています。&lt;/p&gt;

&lt;h2 id=&#34;実際の構成:186562e261a7107c8b7de063b569e16d&#34;&gt;実際の構成&lt;/h2&gt;

&lt;p&gt;Gitのsubmoduleとは1つのGitレポジトリの中に、他のGitレポジトリも含めてバージョン管理を行う機能です。&lt;/p&gt;

&lt;p&gt;カウルのRailsプロジェクトでは &lt;code&gt;${RAILS_ROOT}/app/models&lt;/code&gt; 以下がsubmodule扱いになっており、&lt;strong&gt;複数のRailsプロジェクトから同じモデルクラス群が扱える&lt;/strong&gt; ようになっています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails_app_1
├── app
│    ├── controllers
│    ├── views
│    ├── models   -&amp;gt; ../models_repo/app/models   # シンボリックリンク
│    ├── ...
├── models_repo # submodule
├── ...

rails_app_2
├── app
│    ├── controllers
│    ├── views
│    ├── models   -&amp;gt; ../models_repo/app/models   # シンボリックリンク
│    ├── ...
├── models_repo # submodule
├── ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://techblog.housmart.co.jp/images/20160324/kawlu-simple-architecture-20160324.svg&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;この構成にすることでRailsのもともとのディレクトリ構成を変えることなく、&lt;strong&gt;モデル周りにあるロジックを複数のRailsプロジェクトで共有することができる&lt;/strong&gt; ようになります。&lt;/p&gt;

&lt;p&gt;submodule以下は最新のmasterブランチを追うことで簡単に同期がとれるため、ユーザ用のアプリケーションで追加されたロジックが管理者用アプリケーションで使えないという問題は起きなくなりました。&lt;/p&gt;

&lt;p&gt;また、図では簡単化のためにモデルクラスのみが共有されていますが、実際には他のクラスも共有されています。&lt;/p&gt;

&lt;h3 id=&#34;submoduleの難しさ:186562e261a7107c8b7de063b569e16d&#34;&gt;submoduleの難しさ&lt;/h3&gt;

&lt;p&gt;submoduleでの運用を開始した当初、以下の部分で使い難さがありました。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;単一のGitレポジトリとpush手順が変わる&lt;/li&gt;
&lt;li&gt;プルリクエスト間でコンフリクトが起きやすい&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1つ目のpush手順の違いは、submoduleを含むレポジトリの操作に慣れないうちは特に不便に感じます。
submoduleを含まないレポジトリであれば &lt;code&gt;git add&lt;/code&gt; して &lt;code&gt;git push&lt;/code&gt; するのは1回だけで済みますが、submoduleを含む場合は2回行う必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# submoduleを含まないレポジトリでのpush
project_dir $ git add
project_dir $ git push

# submoduleを含むレポジトリでのpush (submodule内にも差分がある場合)
project_dir $ cd submodule_dir
submodule_dir $ git add
submodule_dir $ git push
submodule_dir $ cd ..
project_dir $ git add
project_dir $ git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2つ目のコンフリクト問題は、submodule内のファイルに変更のあるプルリクエストが複数来ていた場合に発生します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://techblog.housmart.co.jp/images/20160324/git-submodule-20160325.svg&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;上記の図のようにsubmoduleを扱うGitレポジトリでは、&lt;strong&gt;submodule内のどのコミットからどのコミットへの参照に切り替えるか&lt;/strong&gt; という内容を含むコミットが発生します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コミット&amp;rdquo;ロ&amp;rdquo;: submodule内のコミット&amp;rdquo;1&amp;rdquo;から&amp;rdquo;2&amp;rdquo;へ参照を変えるコミット&lt;/li&gt;
&lt;li&gt;コミット&amp;rdquo;B&amp;rdquo;: submodule内のコミット&amp;rdquo;1&amp;rdquo;から&amp;rdquo;3&amp;rdquo;へ参照を変えるコミット&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記のような2つのコミットがプルリクエストに並んでいる状態で片方をマージすると、もう一方で必ずコンフリクトが起きます。後からマージされるコミットの内容は&lt;code&gt;submodule内のコミット&amp;quot;4&amp;quot;から◯◯へ参照を変えるコミット&lt;/code&gt;でなければならないからです。&lt;/p&gt;

&lt;h2 id=&#34;submoduleを簡単に運用するためのbot運用:186562e261a7107c8b7de063b569e16d&#34;&gt;submoduleを簡単に運用するためのbot運用&lt;/h2&gt;

&lt;p&gt;Railsのmodel層を共有できるようになり当初の悩みを解決できた一方で発生した、Gitでの管理上の不便さを補う仕組みも用意しました。
submoduleレポジトリへのプルリクエストがマージされた際のwebhookをきっかけに、自動でsubmoduleを含むプロジェクトも更新されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://techblog.housmart.co.jp/images/20160324/git-submodule-20160325-2.svg&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;submoduleレポジトリでメインブランチ上にマージコミット発生すると、botが自動でsubmodule更新のコミット(図の&amp;rdquo;ロ&amp;rdquo;と&amp;rdquo;B&amp;rdquo;)を行います。
これによりコミット&amp;rdquo;2&amp;rdquo;と&amp;rdquo;3&amp;rdquo;が両方含まれているコミットを &lt;strong&gt;コンフリクトすることなく使う&lt;/strong&gt; ことができます。&lt;/p&gt;

&lt;p&gt;また、bot導入前はsubmoduleのマージコミットに対して参照をしようとするとsubmoduleレポジトリ内のプルリクエストが閉じるのを待つ必要がありましたが、この運用では &lt;strong&gt;submoduleレポジトリ上のプルリクエストがマージされるのを待たず&lt;/strong&gt; にマージコミットをそれぞれのRailsレポジトリで使っていくことができるので、コミット&amp;rdquo;2&amp;rdquo;や&amp;rdquo;3&amp;rdquo;を含め損ねることはありません。&lt;/p&gt;

&lt;p&gt;その他にもbotによるアプリケーションのリリース時には、GitのタグをRailsレポジトリ内とsubmoduleレポジトリ内の両方につけることで、使用されていたsubmoduleレポジトリのバージョンを分かりやすくしています。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:186562e261a7107c8b7de063b569e16d&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回のご紹介した運用の概要は以下です。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;管理機能は別Railsプロジェクトに分けた&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;model部分をsubmodule化して、複数のRails間で共有した&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;submoduleの運用はbotに任せた&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;https://kawlu.com/market&#34;&gt;カウル&lt;/a&gt;では今後もより良い運用を目指して日々改善を行っていきます！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>